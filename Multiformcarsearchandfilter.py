# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Multiformcarsearchandfilter.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget_main = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget_main.setGeometry(QtCore.QRect(20, 10, 761, 551))
        self.stackedWidget_main.setObjectName("stackedWidget_main")
        self.main = QtWidgets.QWidget()
        self.main.setObjectName("main")
        self.pushButton_main_exit = QtWidgets.QPushButton(self.main)
        self.pushButton_main_exit.setGeometry(QtCore.QRect(260, 310, 201, 61))
        self.pushButton_main_exit.setObjectName("pushButton_main_exit")

        #When pushButton_main_exit is clicked it connects to the quit_application function
        self.pushButton_main_exit.clicked.connect(self.quit_application)

        self.pushButton_main_filter = QtWidgets.QPushButton(self.main)
        self.pushButton_main_filter.setGeometry(QtCore.QRect(410, 150, 201, 61))
        self.pushButton_main_filter.setObjectName("pushButton_main_filter")

        #When pushButton_main_filter is clicked connect to the function main_filter
        self.pushButton_main_filter.clicked.connect(self.main_filter)

        self.pushButton_main_search = QtWidgets.QPushButton(self.main)
        self.pushButton_main_search.setGeometry(QtCore.QRect(100, 150, 201, 61))
        self.pushButton_main_search.setObjectName("pushButton_main_search")

        # click of the search button on the dashboard
        self.pushButton_main_search.clicked.connect(self.main_search)

        self.stackedWidget_main.addWidget(self.main)
        self.search = QtWidgets.QWidget()
        self.search.setObjectName("search")
        self.label = QtWidgets.QLabel(self.search)
        self.label.setGeometry(QtCore.QRect(30, 30, 211, 51))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.search)
        self.comboBox.setGeometry(QtCore.QRect(30, 120, 201, 81))
        self.comboBox.setObjectName("comboBox")
        self.label_2 = QtWidgets.QLabel(self.search)
        self.label_2.setGeometry(QtCore.QRect(380, 40, 211, 51))
        self.label_2.setObjectName("label_2")
        self.label_search_price = QtWidgets.QLabel(self.search)
        self.label_search_price.setGeometry(QtCore.QRect(370, 130, 211, 51))
        self.label_search_price.setText("")
        self.label_search_price.setObjectName("label_search_price")
        self.pushButton_search_close = QtWidgets.QPushButton(self.search)
        self.pushButton_search_close.setGeometry(QtCore.QRect(240, 270, 241, 101))
        self.pushButton_search_close.setObjectName("pushButton_search_close")

        # user clicks on the return to dashboard on the search page
        self.pushButton_search_close.clicked.connect(self.search_close)

        self.stackedWidget_main.addWidget(self.search)
        self.filter = QtWidgets.QWidget()
        self.filter.setObjectName("filter")
        self.label_3 = QtWidgets.QLabel(self.filter)
        self.label_3.setGeometry(QtCore.QRect(30, 40, 211, 61))
        self.label_3.setObjectName("label_3")
        self.lineEdit_filter_price = QtWidgets.QLineEdit(self.filter)
        self.lineEdit_filter_price.setGeometry(QtCore.QRect(20, 110, 221, 61))
        self.lineEdit_filter_price.setObjectName("lineEdit_filter_price")
        self.pushButton_filter = QtWidgets.QPushButton(self.filter)
        self.pushButton_filter.setGeometry(QtCore.QRect(300, 110, 191, 51))
        self.pushButton_filter.setObjectName("pushButton_filter")




        self.pushButton_filter_close = QtWidgets.QPushButton(self.filter)
        self.pushButton_filter_close.setGeometry(QtCore.QRect(520, 110, 241, 51))
        self.pushButton_filter_close.setObjectName("pushButton_filter_close")

        #When pushButton_filter_close is clicked connect it to the function filter_close
        self.pushButton_filter_close.clicked.connect(self.filter_close)

        self.tableWidget = QtWidgets.QTableWidget(self.filter)
        self.tableWidget.setGeometry(QtCore.QRect(80, 280, 611, 261))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.stackedWidget_main.addWidget(self.filter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget_main.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # dictionary to hold data for my application
        self.data = {}

        import json
        with open("C:/Users/madel/Downloads/multiform_car_search_filter.json") as json_handler:
            self.data = json.load(json_handler)

        print("Data read from file", self.data)

        # load all car manufacturers in the combobox of the search page
        # self.data.keys() --> gives us all keys (at the parent level) in the dictionary
        self.comboBox.addItems(list(self.data.keys()))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_main_exit.setText(_translate("MainWindow", "Exit"))
        self.pushButton_main_filter.setText(_translate("MainWindow", "Filter"))
        self.pushButton_main_search.setText(_translate("MainWindow", "Search"))
        self.label.setText(_translate("MainWindow", "Car Manufacturer"))
        self.label_2.setText(_translate("MainWindow", "Average Price"))
        self.pushButton_search_close.setText(_translate("MainWindow", "Return to Dashboard"))
        self.label_3.setText(_translate("MainWindow", "Average Price"))
        self.pushButton_filter.setText(_translate("MainWindow", "filter"))
        self.pushButton_filter_close.setText(_translate("MainWindow", "Return to Dashboard"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "New Column"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Average Price"))


    def quit_application(self):
        application.quit()

    # what happens when the user clicks on search button on the dashboard?
    def main_search(self):
        self.stackedWidget_main.setCurrentIndex(1)  # change user's view to the Search page
        self.comboBox.activated.connect(self.display_search_price)

    def display_search_price(self):
        user_selection = self.comboBox.currentText() #Get user's selection from combo box
        print("User's selection on the search page:", user_selection, self.data[user_selection])
        self.label_search_price.setText(self.data[user_selection])

        # use string concatenation to append '$'
        # str('$') + self.data[user_selection]
        self.label_search_price.setText(str('$') + self.data[user_selection])

    # what happens when the user clicks on return to dashboard on the Search page
    def search_close(self):
        self.label_search_price.clear()  # before returning to the dashboard, clear the price for user's selection
        self.comboBox.setCurrentIndex(0)  # reset the combobox before returning to the dashboard
        self.stackedWidget_main.setCurrentIndex(0)  # return to the dashboard

    # what happens when the user clicks on the filter button on the dashboard
    def main_filter(self):
        self.stackedWidget_main.setCurrentIndex(2)  # change user's view to the Filter page
        self.pushButton_filter.clicked.connect(self.filter_show)  # user clicks on the Filter button on the Filter page

    def filter_show(self):
        # accept user's input on the price
        users_price = int(self.lineEdit_filter_price.text())

        # if user's input is non-empty AND all digits
        if len(self.lineEdit_filter_price.text()) != 0 and self.lineEdit_filter_price.text().isdigit():

            self.tableWidget.setRowCount(0)
            for record in self.data:
                print(record, self.data[record])  # print manufacturer and price associated with the manufacturer

                # check if user's price is >= the price in my JSON file
                if users_price >= int(self.data[record]):
                    row = self.tableWidget.rowCount()  # get row count
                    self.tableWidget.insertRow(row)  # add a new row

                    self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(str(record)))
                    self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(str(self.data[record])))

        else:
            msg = QtWidgets.QMessageBox()
            msg.setText("Please ensure price is provided.")
            msg.exec_()

    def filter_close(self):
        self.lineEdit_filter_price.clear()
        self.tableWidget.setRowCount(0)
        self.stackedWidget_main.setCurrentIndex(0)


if __name__ == '__main__':
    import sys
    application = QtWidgets.QApplication(sys.argv)
    form = QtWidgets.QMainWindow()
    user_interface = Ui_MainWindow()
    user_interface.setupUi(form)
    form.show()
    sys.exit(application.exec_())