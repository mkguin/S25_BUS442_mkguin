# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Multiformfinancialplanner.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(917, 637)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(10, 20, 771, 541))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(100, 80, 271, 71))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.page)
        self.label_2.setGeometry(QtCore.QRect(100, 170, 271, 71))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.page)
        self.label_3.setGeometry(QtCore.QRect(100, 250, 271, 71))
        self.label_3.setObjectName("label_3")
        self.lineEdit_annual = QtWidgets.QLineEdit(self.page)
        self.lineEdit_annual.setGeometry(QtCore.QRect(390, 70, 271, 71))
        self.lineEdit_annual.setObjectName("lineEdit_annual")
        self.lineEdit_return_rate = QtWidgets.QLineEdit(self.page)
        self.lineEdit_return_rate.setGeometry(QtCore.QRect(390, 170, 271, 71))
        self.lineEdit_return_rate.setObjectName("lineEdit_return_rate")
        self.lineEdit_goal = QtWidgets.QLineEdit(self.page)
        self.lineEdit_goal.setGeometry(QtCore.QRect(390, 250, 271, 71))
        self.lineEdit_goal.setObjectName("lineEdit_goal")
        self.pushButton_how_long = QtWidgets.QPushButton(self.page)
        self.pushButton_how_long.setGeometry(QtCore.QRect(100, 360, 271, 121))
        self.pushButton_how_long.setObjectName("pushButton_how_long")

        # connect to "calculate_schedule" function when user clicks on the "How long" button
        self.pushButton_how_long.clicked.connect(self.calculate_schedule)

        self.pushButton_quit = QtWidgets.QPushButton(self.page)
        self.pushButton_quit.setGeometry(QtCore.QRect(390, 360, 271, 121))
        self.pushButton_quit.setObjectName("pushButton_quit")

        # quit application code
        self.pushButton_quit.clicked.connect(self.quit_application)

        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.tableWidget = QtWidgets.QTableWidget(self.page_2)
        self.tableWidget.setGeometry(QtCore.QRect(100, 60, 571, 251))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.pushButton_close = QtWidgets.QPushButton(self.page_2)
        self.pushButton_close.setGeometry(QtCore.QRect(250, 380, 221, 61))
        self.pushButton_close.setObjectName("pushButton_close")

        # user clicks on the close button on the schedule page
        self.pushButton_close.clicked.connect(self.go_back)

        self.stackedWidget.addWidget(self.page_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 917, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Annual Contribution"))
        self.label_2.setText(_translate("MainWindow", "Rate of Return"))
        self.label_3.setText(_translate("MainWindow", "Financial Goal"))
        self.pushButton_how_long.setText(_translate("MainWindow", "How long to reach goal?"))
        self.pushButton_quit.setText(_translate("MainWindow", "Quit"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Year"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Portoflio Value"))
        self.pushButton_close.setText(_translate("MainWindow", "Close"))

    # code to quit the application when the user clicks on "Quit" button
    def quit_application(self):
        application.quit()

    # code for validating and calculating the schedule
    def calculate_schedule(self):
        if (len(self.lineEdit_annual.text()) == 0 or len(self.lineEdit_return_rate.text()) == 0 or len(self.lineEdit_goal.text()) == 0):
            msg = QtWidgets.QMessageBox()
            msg.setText("Please enter all input fields.")
            msg.exec_()
            return None
        elif self.lineEdit_annual.text().isdigit() and self.lineEdit_return_rate.text().isdigit() and self.lineEdit_goal.text().isdigit():

            # accept user's inputs
            annual_contribution = int(self.lineEdit_annual.text())  # accept user's input for annual contribution
            return_rate = int(self.lineEdit_return_rate.text())  # accept user's input for rate of return
            financial_goal = int(self.lineEdit_goal.text())  # accept user's input for financial goal

            # change application page to show schedule
            self.stackedWidget.setCurrentIndex(1)

            # number of years required to reach financial goal
            how_long = 0

            # track the value of portfolio each year
            portfolio_value = 0

            self.tableWidget.setRowCount(0)  # set the number of rows to zero

            # keep iterating until the value of portfolio exceeds financial goal
            # we are using while loop since we do not know how many years it will take for the portfolio to reach goal
            while portfolio_value < financial_goal:
                portfolio_value = (portfolio_value + annual_contribution) * (1 + return_rate/100)
                how_long = how_long + 1  # add next year to the count

                print(how_long, portfolio_value)

                row_count = self.tableWidget.rowCount()  # get the number of rows
                self.tableWidget.insertRow(row_count)  # insert new row

                self.tableWidget.setItem(row_count, 0, QtWidgets.QTableWidgetItem(str(how_long)))
                self.tableWidget.setItem(row_count, 1, QtWidgets.QTableWidgetItem(str(portfolio_value)))

            else:
                msg = QtWidgets.QMessageBox()
                msg.setText("Please ensure all input fields are integers.")
                msg.exec_()

    # code to change application's page to start
    def go_back(self):
        # change application page to show main page/user input page
        self.stackedWidget.setCurrentIndex(0)

        # clear all inputs
        self.lineEdit_annual.clear()
        self.lineEdit_return_rate.clear()
        self.lineEdit_goal.clear()

        # clear data from the schedule table
        self.tableWidget.setRowCount(0)


if __name__ == '__main__':
    import sys
    application = QtWidgets.QApplication(sys.argv)
    form = QtWidgets.QMainWindow()
    user_interface = Ui_MainWindow()
    user_interface.setupUi(form)
    form.show()
    sys.exit(application.exec_())