# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'database_insert.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(903, 644)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 40, 201, 71))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 120, 201, 71))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 200, 201, 71))
        self.label_3.setObjectName("label_3")
        self.lineEdit_id = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_id.setGeometry(QtCore.QRect(230, 40, 201, 71))
        self.lineEdit_id.setObjectName("lineEdit_id")
        self.lineEdit_name = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_name.setGeometry(QtCore.QRect(230, 130, 201, 71))
        self.lineEdit_name.setObjectName("lineEdit_name")
        self.lineEdit_age = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_age.setGeometry(QtCore.QRect(230, 210, 201, 71))
        self.lineEdit_age.setObjectName("lineEdit_age")
        self.pushButton_insert = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_insert.setGeometry(QtCore.QRect(70, 320, 201, 71))
        self.pushButton_insert.setObjectName("pushButton_insert")

        # upon click of "Insert Data" button
        self.pushButton_insert.clicked.connect(self.insert_data)

        self.pushButton_display = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_display.setGeometry(QtCore.QRect(570, 30, 201, 71))
        self.pushButton_display.setObjectName("pushButton_display")

        #When pushutton_display is clicked connect to the function retrieve_data
        self.pushButton_display.clicked.connect(self.retrieve_data)

        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(480, 110, 421, 331))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 903, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Student ID"))
        self.label_2.setText(_translate("MainWindow", "Student Name"))
        self.label_3.setText(_translate("MainWindow", "Student Age"))
        self.pushButton_insert.setText(_translate("MainWindow", "Insert Record"))
        self.pushButton_display.setText(_translate("MainWindow", "Display Data"))

    def establish_connection(self):
        try:
            self.connection = mysql.connector.connect(
                host="localhost",
                database="student",
                user="root",
                password="0107"
            )

            msg = QtWidgets.QMessageBox()
            msg.setText("Connection was successfully established!")
            msg.exec_()

        except Exception as e:
            msg = QtWidgets.QMessageBox()
            msg.setText("Could not establish connection to the server because" + str(e))
            msg.exec_()

    def close_connection(self):
        try:
            self.connection.close()
        except Exception as e:
            msg = QtWidgets.QMessageBox()
            msg.setText("Could not close connection to the server because" + str(e))
            msg.exec_()

    def retrieve_data(self):
        self.establish_connection()
        cursor = self.connection.cursor()
        cursor.execute("SELECT * FROM student")
        resultset = cursor.fetchall()
        print(cursor.description)
        columns = []
        for col in cursor.description:
            print(col, col[0])
            columns.append(col[0])  # append column names to the list
        columns.append('Eligibility')
        print(columns, len(columns))
        self.tableWidget.setColumnCount(len(columns))
        self.tableWidget.setHorizontalHeaderLabels(columns)
        self.tableWidget.setRowCount(0)
        for record in resultset:
            print(record)
            row = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row)
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(str(record[0])))
            self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(str(record[1])))
            self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(str(record[2])))
            if int(record[2]) > 21:
                self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(str('Yes')))
            else:
                self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(str('No')))

        # close connection to the DB
        self.close_connection()

    def insert_data(self):
        # if all fields have been provided by the user
        if len(self.lineEdit_id.text()) > 0 and len(self.lineEdit_name.text()) > 0 and len(
                self.lineEdit_age.text()) > 0:
            print("All inputs were provided")

            # validate if the ID and age is integer
            if self.lineEdit_id.text().isdigit() and self.lineEdit_age.text().isdigit():
                print("ID and age are valid")

                try:
                    self.establish_connection()
                    cursor = self.connection.cursor()
                    cursor.execute("SELECT * FROM student")
                    resultset = cursor.fetchall()

                    # flag becomes 1 when the id exists in the database
                    flag = 0

                    for record in resultset:
                        print(record, record[0], record[1], record[2])
                        if int(record[0]) == int(self.lineEdit_id.text()):
                            flag = 1
                    print("Value of flag after iterating resultset", flag)

                    if flag == 0:  # ID does not exist in the database table
                        query = "INSERT INTO student VALUES (%s, %s, %s)"
                        arguments = (int(self.lineEdit_id.text()),
                                     self.lineEdit_name.text(),
                                     int(self.lineEdit_age.text()))

                        cursor.execute(query, arguments)  # execute the insert statement and pass arguments
                        self.connection.commit()  # commit the changes to the database
                        self.close_connection()  # close the connection

                        msg = QtWidgets.QMessageBox()
                        msg.setText("Record successfully inserted")
                        msg.exec_()
                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setText("Cannot add new row. ID already exists")
                        msg.exec_()
                except Exception as e:
                    msg = QtWidgets.QMessageBox()
                    msg.setText("Could not insert record")
                    msg.exec()
            else:
                msg = QtWidgets.QMessageBox()
                msg.setText("Please provide valid ID and age inputs.")
                msg.exec_()

        else:  # not all fields have been provided by the user
            msg = QtWidgets.QMessageBox()
            msg.setText("Please provide all inputs.")
            msg.exec_()


#Run the application
if __name__ == '__main__':
    import sys
    application = QtWidgets.QApplication(sys.argv)
    form = QtWidgets.QMainWindow()
    user_interface = Ui_MainWindow()
    user_interface.setupUi(form)
    form.show()
    sys.exit(application.exec_())